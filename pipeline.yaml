# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
 
# trigger:
#   none
 
# pool:
#   name: "poolcapstone"
 
# stages:
# # Stage 1: Git Clone
# - stage: GitClone
#   displayName: "Clone Repository"
#   jobs:
#   - job: CloneJob
#     displayName: "Clone Git Repository"
#     steps:
#     - checkout: self
#       displayName: "Checkout Source Code"
 
# - stage: BuildAndPush
#   displayName: Build and Push stage
#   dependsOn: GitClone
#   jobs:
#   - job: BuildAndPush
#     displayName: Build and Push Docker Image
#     steps:
#     - task: Docker@2
#       displayName: Build and push an image to container registry
#       inputs:
#         containerRegistry: 'DockerRegistrysaunak'
#         repository: 'python-app'
#         command: 'buildAndPush'
#         Dockerfile: '**/Dockerfile'
#         tags: |
#           $(Build.BuildId)
#           latest
 
 
# # Stage 2: Kubernetes Deployment
# - stage: KubernetesDeployment
#   displayName: "Deploy to Kubernetes Cluster"
#   dependsOn: Deploy_AKS
#   jobs:
#   - job: DeployToAKS
#     displayName: "Deploy to AKS Cluster"
#     steps:
#     # Apply Kubernetes manifests
#     - task: KubernetesManifest@1
#       displayName: "Apply Kubernetes Manifests"
#       inputs:
#         action: 'deploy'
#         connectionType: 'azureResourceManager'
#         azureSubscriptionConnection: 'connectionsaunak'
#         azureResourceGroup: 'RG-saunak'
#         kubernetesCluster: 'myakscluster-saunak'
#         useClusterAdmin: true
#         manifests: '$(System.DefaultWorkingDirectory)/manifests/*.yaml'
    
#     # Script to verify deployment
#     - script: |
#         echo "Checking Kubernetes pod status..."
#         kubectl get pods,svc
#         echo "Fetching External IP of the Nginx Service..."
#         EXTERNAL_IP=$(kubectl get svc nginx-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
#         echo "External IP of Nginx service is: $EXTERNAL_IP"
#         echo "Testing external service (Nginx) with curl..."
#         curl -s http://$EXTERNAL_IP
#       displayName: "Verify Kubernetes Service Deployment"

# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  none

pool:
  name: "poolcapstone"

stages:
# Stage 1: Git Clone
- stage: GitClone
  displayName: "Clone Repository"
  jobs:
    - job: CloneJob
      displayName: "Clone Git Repository"
      steps:
        - checkout: self
          displayName: "Checkout Source Code"

# Stage 2: Build and Push Docker Image
- stage: BuildAndPush
  displayName: Build and Push stage
  dependsOn: GitClone
  jobs:
    - job: BuildAndPush
      displayName: "Build and Push Docker Image"
      steps:
        - task: Docker@2
          displayName: Build and push an image to container registry
          inputs:
            containerRegistry: 'DockerRegistrysaunak'
            repository: 'python-app'
            command: 'buildAndPush'
            Dockerfile: '**/Dockerfile'
            tags: |
              $(Build.BuildId)
              latest

# Stage 3: Kubernetes Deployment
- stage: KubernetesDeployment
  displayName: "Deploy to Kubernetes Cluster"
  dependsOn: BuildAndPush
  jobs:
    - job: DeployToAKS
      displayName: "Deploy to AKS Cluster"
      steps:
        # Apply Kubernetes manifests
        - task: KubernetesManifest@1
          displayName: "Apply Kubernetes Manifests"
          inputs:
            action: 'deploy'
            connectionType: 'azureResourceManager'
            azureSubscriptionConnection: 'connectionsaunak'
            azureResourceGroup: 'RG-saunak'
            kubernetesCluster: 'myakscluster-saunak'
            useClusterAdmin: true
            manifests: '$(System.DefaultWorkingDirectory)/manifests/*.yaml'

        # Script to verify deployment
        - script: |
            echo "Verifying Kubernetes Deployment..."
            kubectl get pods,svc
            echo "Fetching External IP of the Python App Service..."
            EXTERNAL_IP=$(kubectl get svc web-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            echo "External IP of Python App service is: $EXTERNAL_IP"
            echo "Testing external service with curl..."
            curl -s http://$EXTERNAL_IP || echo "Service not responding, verify deployment."
          displayName: "Verify Kubernetes Deployment"

# Stage 4: Approval Stage
- stage: ApprovalStage
  displayName: "Approval Stage"
  dependsOn: KubernetesDeployment
  jobs:
    - deployment: ManualApproval
      displayName: "Approval for deleting Deployment and service"
      environment: DeleteDeploymentAndService
      strategy:
        runOnce:
          deploy:
            steps:
              - script: |
                  echo "Deketing te deployment and svc"
                displayName: "Approval Confirmed"